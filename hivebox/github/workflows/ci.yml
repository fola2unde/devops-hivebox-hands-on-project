name: CI Pipeline

on:
  push:
    branches: [ main, phase-* ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Lint code with flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check app/

    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        failure-threshold: warning

    - name: Run unit tests
      run: |
        pytest tests/test_*.py -v --cov=app --cov-report=xml -k "not integration"

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v -m "not slow"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  sonarqube-analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarQube Quality Gate check
      uses: sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  terrascan-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'k8s'
        iac_dir: 'k8s/'
        policy_type: 'k8s'
        only_warn: true

  build-and-test-k8s:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t hivebox:${{ github.sha }} .

    - name: Create Kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        config: kind/config.yaml
        cluster_name: hivebox-test

    - name: Load Docker image into Kind
      run: |
        kind load docker-image hivebox:${{ github.sha }} --name hivebox-test

    - name: Install ingress-nginx
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=90s

    - name: Deploy to Kubernetes
      run: |
        # Update image tag in deployment
        sed -i 's|hivebox:0.2.0|hivebox:${{ github.sha }}|g' k8s/deployment.yaml

        # Apply manifests
        kubectl apply -f k8s/

        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment/hivebox

    - name: Test Kubernetes deployment
      run: |
        # Port forward to test
        kubectl port-forward service/hivebox-service 8080:80 &
        sleep 10

        # Test endpoints
        curl -f http://localhost:8080/version
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/metrics

  security-scan:
    runs-on: ubuntu-latest

  steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Run OpenSSF Scorecard
    uses: ossf/scorecard-action@v2.3.1
    with:
      results_file: results.sarif
      results_format: sarif
      repo_token: ${{ secrets.SCORECARD_TOKEN }}

  - name: Upload SARIF results
    uses: github/codeql-action/upload-sarif@v2
    with:
      sarif_file: results.sarif

  - name: Test version endpoint
    run: |
      # Start container in background
      docker run -d --name test-hivebox -p 5000:5000 hivebox:${{ github.sha }}
      
      # Wait for container to start
      sleep 15
      
      # Test version endpoint
      response=$(curl -s http://localhost:5000/version)
      echo "Response: $response"
      echo "$response" | jq -e '.version == "0.1.0"'
      
      # Test health endpoint
      curl -f http://localhost:5000/health
      
      # Clean up
      docker stop test-hivebox
      docker rm test-hivebox